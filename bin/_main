#!/usr/bin/env bash
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-

CRUCIBLE_HOME="${1}"
shift
LOG_DB="${1}"
shift

if [ -z "${CRUCIBLE_HOME}" -o ! -e "${CRUCIBLE_HOME}" ]; then
    echo "ERROR: Could not find \${CRUCIBLE_HOME} [${CRUCIBLE_HOME}], exiting."
    exit 1
fi

if [ -z "${LOG_DB}" -o ! -e "${LOG_DB}" -a "$CRUCIBLE_USE_LOGGER" == "1" ]; then
    echo "ERROR: Could not find \${LOG_DB} [${LOG_DB}], exiting."
    exit 2
fi

. /etc/sysconfig/crucible
. $CRUCIBLE_HOME/bin/base

container_redis_args=()
container_redis_args+=("-d")
container_redis_args+=("--mount=type=bind,source=$CRUCIBLE_HOME/config/redis.conf,destination=/etc/redis.conf")

container_httpd_args=()
container_httpd_args+=("-d")
container_httpd_args+=("--mount=type=bind,source=$CRUCIBLE_HOME/config/httpd/,destination=/etc/httpd/")

container_es_args=()
container_es_args+=("-d")
container_es_args+=("--mount=type=bind,source=$CRUCIBLE_HOME/config/elasticsearch/,destination=/etc/elasticsearch/")

container_rs_args=()
container_rs_args+=("-i")
container_rs_args+=("-e RS_REG_REPO=$CRUCIBLE_CLIENT_SERVER_REPO")
container_rs_args+=("-e RS_REG_AUTH=$CRUCIBLE_CLIENT_SERVER_AUTH")
container_rs_args+=("-e RS_EMAIL=$CRUCIBLE_EMAIL")
container_rs_args+=("-e RS_NAME=\"$CRUCIBLE_NAME\"")

if [ "${1}" == "log" ]; then
    shift
    ${CRUCIBLE_HOME}/bin/log ${1} ${LOG_DB}
    RET_VAL=$?
elif [ "${1}" == "repo" ]; then
    shift
    if [ -z "${1}" ]; then
        ${CRUCIBLE_HOME}/bin/repo status
        RET_VAL=$?
    else
        ${CRUCIBLE_HOME}/bin/repo "$@"
        RET_VAL=$?
    fi
elif [ "${1}" == "update" ]; then
    shift
    if [ -z "${1}" ]; then
        ${CRUCIBLE_HOME}/bin/update all
        RET_VAL=$?
    else
        ${CRUCIBLE_HOME}/bin/update ${1}
        RET_VAL=$?
    fi
elif [ "${1}" == "workshop" ]; then
    shift
    ${CRUCIBLE_HOME}/subprojects/core/workshop/workshop.pl "$@"
    RET_VAL=$?
elif [ "${1}" == "gen-iterations" ]; then
    shift
    benchmark=${1}
    shift
    "${CRUCIBLE_HOME}"/subprojects/core/multiplex/multiplex \
        "${CRUCIBLE_HOME}/subprojects/benchmarks/$benchmark/multiplex.json" "$@"
    RET_VAL=$?
elif [ "${1}" == "run" ]; then
    shift
    benchmark=${1}
    shift
    # If --tags is used, embedd this in the $base_run_dir
    # (Don't modify $@ to do this)
    base_run_dir=""
    args=("$@")
    arg_num=0
    while [ $arg_num -lt ${#args[@]} ]; do
        echo "arg $arg_num: ${args[$arg_num]}"
	if [ ${args[$arg_num]} == "--tags" ]; then
            ((arg_num++))
            base_run_dir="--${args[$arg_num]}"
	    break
        fi
        ((arg_num++))
    done
    base_run_dir="$var_crucible/run/$benchmark-$datetime$base_run_dir"
    if [ -z "$CRUCIBLE_CLIENT_SERVER_REPO" ]; then
        exit_error "CRUCIBLE_CLIENT_SERVER_REPO is not defined"
    fi
    if [ -z "$CRUCIBLE_CLIENT_SERVER_AUTH" ]; then
        exit_error "CRUCIBLE_CLIENT_SERVER_AUTH is not defined"
    fi

    container_redis_cmd="podman run $container_redis_opts ${container_common_args[@]}"
    if [ "$CRUCIBLE_USE_CONTAINERS" == "1" -a -z "$CRUCIBLE_CONTAINER_IMAGE" ]; then
        echo "Switching to not using container because CRUCIBLE_CONTAINER_IMAGE is not defined"
        CRUCIBLE_USE_CONTAINERS="0"
    fi
    mkdir -p "$base_run_dir"
    benchmark_subproj_dir="${CRUCIBLE_HOME}"/subprojects/benchmarks/$benchmark
    rs_dir="${CRUCIBLE_HOME}"/subprojects/core/rickshaw
    if [ ! -e bench-params.json ]; then
        echo "Make sure you have defined the benchmark parameters and put in a file \"bench-params.json\""
        echo "You can generate these parameters with \"crucible gen-iterations <benchmark> <options>"
        echo "Here are some examples:"
        echo "crucible gen-iterations fio --defaults basic"
        echo "crucible gen-iterations fio --defaults basic --rw randread,randwrite --bs 4k,64k"
        echo ""
        echo "Once you have run this, you should have a file, \"bench-params.json\" in your current directory"
        exit 1
    fi

    if [ ! -e tool-params.json ]; then
        echo "You do not have a \"tool-params.json\" in the current directory.  Crucible will use"
        echo "the default tools found in $rs_dir/config/tool-params.json.  If you wish to use"
        echo "different tools, create a tool-params.json which adheres to this schema: $rs_dir/schema/tools/json"
        tool_params_file="$rs_dir/config/tool-params.json"
    else
        tool_params_file=tool-params.json
    fi

    if [ ! -e "$benchmark_subproj_dir" ]; then
        echo "Running benchmark $benchmark requires that subproject"
        echo "located in "${CRUCIBLE_HOME}"/subprojects/bench/$benchmark"
        echo "This directory could not be found.  Here are the benchmark"
        echo "subproject directories:"
        /bin/ls "${CRUCIBLE_HOME}"/subprojects/bench/$benchmark
        exit 1
    fi
    redis_cmd="/usr/bin/redis-server /etc/redis.conf"
    httpd_cmd="/usr/sbin/httpd -DFOREGROUND"
    es_cmd="${CRUCIBLE_HOME}/config/start-es.sh $var_crucible/es"
    rs_run_cmd="${CRUCIBLE_HOME}/subprojects/core/rickshaw/rickshaw-run\
      --tool-params $tool_params_file\
      --bench-params bench-params.json\
      --bench-dir $benchmark_subproj_dir\
      --roadblock-dir=${CRUCIBLE_HOME}/subprojects/core/roadblock\
      --workshop-dir=${CRUCIBLE_HOME}/subprojects/core/workshop\
      --tools-dir=${CRUCIBLE_HOME}/subprojects/tools\
      --base-run-dir=$base_run_dir\
      $@"
    rs_pp_b_cmd="${CRUCIBLE_HOME}/subprojects/core/rickshaw/rickshaw-post-process-bench\
      --base-run-dir=$base_run_dir"
    rs_pp_t_cmd="${CRUCIBLE_HOME}/subprojects/core/rickshaw/rickshaw-post-process-tools\
      --base-run-dir=$base_run_dir"
    rs_pp_c_cmd="${CRUCIBLE_HOME}/subprojects/core/rickshaw/rickshaw-post-process-consolidate\
      --base-run-dir=$base_run_dir"
    rs_export_cmd="${CRUCIBLE_HOME}/subprojects/core/rickshaw/rickshaw-export\
      --base-run-dir=$base_run_dir"
    if [ "$CRUCIBLE_USE_CONTAINERS" == "1" ]; then
        echo "Checking for redis"
        if podman ps | grep -q crucible-redis; then
            echo "...appears to be running"
        else
            echo "...not present, starting a container for it:"
	    firewall-cmd --zone=public --add-port=6379/tcp
            echo "podman run --name crucible-redis ${container_common_args[@]} ${container_redis_args[@]} $CRUCIBLE_CONTAINER_IMAGE $redis_cmd"
            podman run --name crucible-redis "${container_common_args[@]}" "${container_redis_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $redis_cmd
        fi
        RET_VAL=$?
        if [ $RET_VAL -gt 0 ]; then
            exit_error "Could not start redis"
        fi

        echo "Checking for httpd"
        if podman ps | grep -q crucible-httpd; then
            echo "...appears to be running"
        else
            echo "...not present, starting a container for it:"
	        firewall-cmd --zone=public --add-port=8080/tcp
            echo "podman run --name crucible-httpd ${container_common_args[@]} ${container_httpd_args[@]} $CRUCIBLE_CONTAINER_IMAGE $httpd_cmd"
            podman run --name crucible-httpd "${container_common_args[@]}" "${container_httpd_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $httpd_cmd
        fi
        if [ $RET_VAL -gt 0 ]; then
            exit_error "Could not start httpd"
        fi

        echo "Checking for elasticsearch"
        if podman ps | grep -q crucible-es; then
            echo "...appears to be running"
        else
            echo "...not present, starting a container for it:"
	        firewall-cmd --zone=public --add-port=9200/tcp --add-port=9300/tcp
            mkdir -p "$var_crucible/es"
            echo "podman run --name crucible-es ${container_common_args[@]} ${container_es_args[@]} $CRUCIBLE_CONTAINER_IMAGE $es_cmd"
            podman run --name crucible-es "${container_common_args[@]}" "${container_es_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $es_cmd
        fi
        if [ $RET_VAL -gt 0 ]; then
            exit_error "Could not start elasticseach"
        fi

        echo "podman run --name crucible-run ${container_common_args[@]} ${container_rs_args[@]} $CRUCIBLE_CONTAINER_IMAGE $rs_run_cmd"
        podman run --name crucible-run "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $rs_run_cmd
    fi
    if [ $RET_VAL -eq 0 ]; then
        if [ "$CRUCIBLE_USE_CONTAINERS" == "1" ]; then
            podman run "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $rs_pp_b_cmd &&
            podman run "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $rs_pp_t_cmd &&
            podman run "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $rs_pp_c_cmd &&
	    echo "Benchmark result is in $base_run_dir" &&
            podman run "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $rs_export_cmd &&
            RET_VAL=$?
	    echo "Benchmark result now in elastic, localhost:9200"
	    fi
    fi
elif [ "${1}" == "wrapper" ]; then
    shift
    if [ "$CRUCIBLE_USE_CONTAINERS" == "1" ]; then
	    podman run --name crucible-wrapper "${container_common_args[@]}" "${container_rs_args[@]}" $CRUCIBLE_CONTAINER_IMAGE $@
        RET_VAL=$?
    else
        $@
        RET_VAL=$?
    fi
else
    echo "This function has not been implemented"
fi

exit ${RET_VAL}

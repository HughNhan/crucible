#!/usr/bin/env bash
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-

# Crucible's purpose is to provide a single interface
# for all of these subprojects for a seamless performance
# benchmark and tool harness solution

# Crucible expects to have these subprojects (eventually):
#
# Project-name      Commands        Purpose                   Status
#
# Rickshaw          run-benchmark   Coordinate a full "run"   Not implemented
#                   clear-result    of a benchmark with one
#                                   or more iterations
#
# Multiplex         gen-iterations  Convert a user's list     Minimally viable,
#                                   of benchamrk params       Integrated
#                                   (--opt val1,val2)
#                                   into multiple benchmark
#                                   iterations
#
# <remote-exec>     auth-hosts      Automated ssh key         Not implemented
#                   ssh-hosts       installation, multi-
#                                   remote-host execution
#
# Roadblock         <TBD>           Provide synchrnization    Minimally viable,
#                                   across endpoints (hosts   Not integrated
#                                   and/or containers) and
#                                   this controller
#
# Workshop          workshop        Image management for      Under Development
#                                   endpoint execution
#
# <tools-project>   register-tool   Integrate various tools   Not implemented
#                   unregister-tool for execution
#
# <elastic/CDM>     query-elastic   Data storage, query,      Under developoment
#                   import-elastic  reporting, etc.
#                   build-elastic
#
#
# Addtionally, Crucible will work with one or more
# benchmark or tool subprojects, found in:
# ./subprojects/tools
# ./subprojects/benchmarks
# 
# These subprojects provide configuration information,
# integration scripts, and post-processing scripts
# for a specific benchmark or tool, like Fio or Iostat.

# Crucible is meant to be run from a single command, 'crucible'
# and provide all the functionality from these projects.

if [ -z "$CRUCIBLE_HOME" ]; then
    if [ -e /etc/sysconfig/crucible ]; then
        . /etc/sysconfig/crucible
        if [ -z "$CRUCIBLE_HOME" ]; then
            echo "\$CRUCIBLE_HOME does not appear to be defined in /etc/sysconfig/crucible, exiting"
            exit 1
        else
            export CRUCIBLE_HOME=$CRUCIBLE_HOME
        fi
    else
        echo "Could not find /etc/sysconfig/crucible.  Please ensure crucible is installed first."
        exit 1
    fi
fi

if [ ! -e $CRUCIBLE_HOME ]; then
    echo "Could not find $CRUCIBLE_HOME, exiting."
    exit 1
fi

# make sure the user has a .crucible directory for storing things
USER_STORE=$HOME/.crucible
if [ ! -d ${USER_STORE} ]; then
    mkdir -v ${USER_STORE}
fi

CRUCIBLE_USE_CONTAINERS=1 # Anything crucible runs that needs SW beyond the basics should run in a container
LOG_DB=${USER_STORE}/log.db

function help() {
    echo "Usage:"
    echo "  crucible <command> [command-specific-options]"
    echo ""
    echo "The following commands are supported"
    echo ""
    echo "help            |  Show this help message"
    echo "log             |  Work with the crucible log"
    echo "repo            |  Crucible repository management"
    echo "update          |  Update the repositories that comprise crucible"
    echo "workshop        |  Build container images"
    echo "gen-iterations  |  Show the iterations generated for a benchmark"
    echo "wrapper         |  Run user supplied programs inside a crucible wrapper for logging purposes"
    echo ""
    echo "For more detailed help for each command, try:"
    echo "  crucible help <command>"
    echo ""
}

function setup_pipe() {
    local PIPE=${1}

    rm ${PIPE}
    mknod ${PIPE} p
}

# make sure that the log is initialized if it has not been done
# previously
if [ ! -e ${LOG_DB} ]; then
    $CRUCIBLE_HOME/bin/log init ${LOG_DB}
fi

# special case some log operations so they don't happen under log
# redirection
if [ "$1" == "log" ]; then
    if [ "$2" == "view" -o -z "$2" ]; then
        shift
        shift
        $CRUCIBLE_HOME/bin/log view ${LOG_DB} "$@" | less -S -F
        exit $?
    elif [ "$2" == "clear" ]; then
        $CRUCIBLE_HOME/bin/log clear ${LOG_DB}
        exit $?
    elif [ "$2" == "init" ]; then
        $CRUCIBLE_HOME/bin/log init ${LOG_DB}
        exit $?
    elif [ "$2" == "insert" ]; then
        shift
        shift
        ${CRUCIBLE_HOME}/bin/log insert ${LOG_DB} "$@"
        exit $?
    elif [ "$2" == "debug" ]; then
            sqlite3 ${LOG_DB} ".headers on" \
                    ".echo on" \
                    "select * from db_state;" ".print" \
                    "select * from streams;" ".print" \
                    "select * from sources;" ".print" \
                    "select * from commands;" ".print" \
                    "select * from sessions;" ".print" \
                    "select * from lines;" \
                | less -S -F
            exit $?
    fi
elif [ "$1" == "help" ]; then
    # print all help output outside of the logger context to avoid
    # filling the log with generic help information

    shift
    {
        if [ "$1" == "log" ]; then
            $CRUCIBLE_HOME/bin/log help
        elif [ "$1" == "repo" ]; then
            $CRUCIBLE_HOME/bin/repo help
        elif [ "$1" == "update" ]; then
            $CRUCIBLE_HOME/bin/update help
        elif [ "$1" == "workshop" ]; then
            $CRUCIBLE_HOME/subprojects/core/workshop/workshop.pl --help
        elif [ "$1" == "gen-iterations" ]; then
            shift
            if [ -z "$1" ]; then
                test -e $CRUCIBLE_HOME/subprojects/core/multiplex/print_help && \
                    $CRUCIBLE_HOME/subprojects/core/multiplex/print_help || \
                        echo "No help found"
            else
                test -e $CRUCIBLE_HOME/subprojects/benchmarks/$1/print_help && \
                    $CRUCIBLE_HOME/subprojects/benchmarks/$1/print_help || \
                        echo "No help found"
            fi
        else
            help
        fi
    } | less -S -F

    exit
fi

# disable CTRL-C killing this script while we are logging to a remote
# process the CTRL-C should kill any subprocess other than the logger
# and we should gracefully exit
trap "echo 'Crucible caught CTRL-C'" INT

# initialize the logger pipes
STDOUT_PIPE=$(mktemp)
STDERR_PIPE=$(mktemp)
setup_pipe ${STDOUT_PIPE}
setup_pipe ${STDERR_PIPE}

COMMAND="$(basename $0) $@"

# launch the logger into the background
${CRUCIBLE_HOME}/bin/_logger console "${COMMAND}" ${USER_STORE}/log.db ${STDOUT_PIPE} ${STDERR_PIPE} &
LOGGER_PID=$!

# redirect the output to the pipes
exec > ${STDOUT_PIPE} 2> ${STDERR_PIPE}

if [ "$1" == "log" ]; then
    shift
    ${CRUCIBLE_HOME}/bin/log $1 ${LOG_DB}
    RET_VAL=$?
elif [ "$1" == "repo" ]; then
    shift
    if [ -z "$1" ]; then
        $CRUCIBLE_HOME/bin/repo status
        RET_VAL=$?
    else
        $CRUCIBLE_HOME/bin/repo "$@"
        RET_VAL=$?
    fi
elif [ "$1" == "update" ]; then
    shift
    if [ -z "$1" ]; then
        $CRUCIBLE_HOME/bin/update all
        RET_VAL=$?
    else
        $CRUCIBLE_HOME/bin/update $1
        RET_VAL=$?
    fi
elif [ "$1" == "workshop" ]; then
    shift
    $CRUCIBLE_HOME/subprojects/core/workshop/workshop.pl "$@"
    RET_VAL=$?
elif [ "$1" == "gen-iterations" ]; then
    shift
    benchmark=$1
    shift
    "$CRUCIBLE_HOME"/subprojects/core/multiplex/multiplex \
        "$CRUCIBLE_HOME/subprojects/benchmarks/$benchmark/multiplex.json" "$@"
    RET_VAL=$?
elif [ "$1" == "run" ]; then
    shift
    benchmark=$1
    shift
    container_run_cmd="podman run\
      -i -t --rm\
      --mount=type=bind,source=/var/lib/containers,destination=/var/lib/containers\
      --mount=type=bind,source=/root,destination=/root\
      --mount=type=bind,source=/home,destination=/home\
      --mount=type=bind,source=/var/opt/crucible,destination=/var/opt/crucible\
      --mount=type=bind,source=/var/run/crucible,destination=/var/run/crucible\
      --mount=type=bind,source=$CRUCIBLE_HOME,destination=$CRUCIBLE_HOME\
      --privileged --ipc=host --pid=host --net=host --cap-add=all --env-host\
      --security-opt label=disable\
      --workdir=`/bin/pwd`\
      localhost/workshop/fedora31_crucible-controller"
      #--mount=type=bind,source=`/bin/pwd`,destination=`/bin/pwd`\

    datetime=`date +%Y-%m-%d_%H:%M:%S`
    base_run_dir="/var/run/crucible/$benchmark-$datetime"
    mkdir -p "$base_run_dir"
    benchmark_subproj_dir="$CRUCIBLE_HOME"/subprojects/benchmarks/$benchmark
    rs_dir="$CRUCIBLE_HOME"/subprojects/core/rickshaw
    if [ ! -e bench-params.json ]; then
        echo "Make sure you have defined the benchmark parameters and put in a file \"bench-params.json\""
        echo "You can generate these parameters with \"crucible gen-iterations <benchmark> <options>"
        echo "Here are some examples:"
        echo "crucible gen-iterations fio --defaults basic"
        echo "crucible gen-iterations fio --defaults basic --rw randread,randwrite --bs 4k,64k"
        echo ""
        echo "Once you have run this, you should have a file, \"bench-params.json\" in your current directory"
        exit 1
    fi

    if [ ! -e tool-params.json ]; then
        echo "You do not have a \"tool-params.json\" in the current directory.  Crucible will use"
        echo "the default tools found in $rs_dir/config/tool-params.json.  If you wish to use"
        echo "different tools, create a tool-params.json which adheres to this schema: $rs_dir/schema/tools/json"
        tool_params_file="$rs_dir/config/tool-params.json"
    else
        tool_params_file=tool-params.json
    fi

    if [ ! -e "$benchmark_subproj_dir" ]; then
        echo "Running benchmark $benchmark requires that subproject"
        echo "located in "$CRUCIBLE_HOME"/subprojects/bench/$benchmark"
        echo "This directory could not be found.  Here are the benchmark"
        echo "subproject directories:"
        /bin/ls "$CRUCIBLE_HOME"/subprojects/bench/$benchmark
        exit 1
    fi
    run_cmd="$CRUCIBLE_HOME/subprojects/core/rickshaw/rickshaw-run\
      --tool-params $tool_params_file\
      --bench-params bench-params.json\
      --bench-dir $benchmark_subproj_dir\
      --roadblock-dir=$CRUCIBLE_HOME/subprojects/core/roadblock\
      --workshop-dir=$CRUCIBLE_HOME/subprojects/core/workshop\
      --tools-dir=$CRUCIBLE_HOME/subprojects/tools\
      --base-run-dir=$base_run_dir\
      $@"
    pp_cmd="$CRUCIBLE_HOME/subprojects/core/rickshaw/rickshaw-post-process\
      --base-run-dir=$base_run_dir"
    if [ "$CRUCIBLE_USE_CONTAINERS" == "1" ]; then
        run_cmd="$container_run_cmd $run_cmd"
        pp_cmd="$container_run_cmd $pp_cmd"
    fi
    echo "run cmd: $run_cmd"
    $run_cmd
    RET_VAL=$?
    if [ $RET_VAL -eq 0 ]; then
        echo "post-process cmd: $pp_cmd"
        $pp_cmd
        RET_VAL=$?
    fi
elif [ "$1" == "wrapper" ]; then
    shift
    "$@"
    RET_VAL=$?
else
    echo "This function has not been implemented"
fi

# signal the logger that all output has been processed from each of
# the pipes
echo "STDOUT->CRUCIBLE_CLOSE_LOG_PIPE" > ${STDOUT_PIPE}
echo "STDERR->CRUCIBLE_CLOSE_LOG_PIPE" > ${STDERR_PIPE}

# wait for the logger to exit
wait ${LOGGER_PID}
exit ${RET_VAL}
